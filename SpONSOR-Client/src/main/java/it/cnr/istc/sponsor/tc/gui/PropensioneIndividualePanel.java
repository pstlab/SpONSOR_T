/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.cnr.istc.sponsor.tc.gui;

import com.google.gson.Gson;
import it.cnr.istc.sponsor.tc.gui.freeturn.FreeTimeFrame;
import it.cnr.istc.sponsor.tc.logic.Account;
import it.cnr.istc.sponsor.tc.logic.Interval;
import it.cnr.istc.sponsor.tc.logic.LoginTestManager;
import it.cnr.istc.sponsor.tc.logic.QuestionPointListener;
import it.cnr.istc.sponsor.tc.logic.QuestionPointManager;
import it.cnr.istc.sponsor.tc.logic.XMLAnswer;
import it.cnr.istc.sponsor.tc.logic.XMLQuestion;
import it.cnr.istc.sponsor.tc.logic.XMLQuestionnary;
import it.cnr.istc.sponsor.tc.mqtt.MQTTClient;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.GroupLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.LayoutStyle;
import org.eclipse.paho.client.mqttv3.MqttException;

/**
 *
 * @author Luca Coraci <luca.coraci@istc.cnr.it> ISTC-CNR
 */
public class PropensioneIndividualePanel extends javax.swing.JPanel implements QuestionPointListener {

    private List<SinglePropensionePanel> panels = new ArrayList<>();
    private int currentIndex = 0;
    private XMLQuestionnary questionnary;

    /**
     * Creates new form PropensioneIndividualePanel
     *
     * @param questionnary
     */
    public PropensioneIndividualePanel(XMLQuestionnary questionnary) {
        initComponents();
        this.questionnary = questionnary;
//        QUAQUA
        QuestionPointManager.getInstance().addQuestionPointListener(this);
        for (XMLQuestion question : questionnary.getQuestions()) {
//            System.out.println("MAX -> " + questionnary.getMax());
//            System.out.println("QUEESTION -> "+questionnary.getName());
            SinglePropensionePanel panel = new SinglePropensionePanel(question.getTitle(), question.getSubtitle(), questionnary.getMax());
            for (XMLAnswer answer : question.getAnswers()) {
                panel.addQuestion(answer.getCode(), answer.getText());

            }
            panels.add(panel);
        }

        this.jScrollPane1.setViewportView(panels.get(0));
        this.redButton_Indietro.setText("Indietro");
        this.redButton_Avanti.setText("Avanti");
        this.redButton_Avanti.setEnabled(false);
        this.redButton_FinishButton.setText("Fine");
        this.redButton_FinishButton.setEnabled(false);

        this.redButton_Avanti.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
//                System.out.println("AVANTIIIIIIIIIIIIIIIIIIII");
                currentIndex++;
                System.out.println("INDEX = " + currentIndex);
                jScrollPane1.setViewportView(panels.get(currentIndex));
                if (currentIndex == panels.size() - 1) {
                    redButton_Avanti.setEnabled(false);
                    redButton_FinishButton.setEnabled(true);
                }
                if (currentIndex > 0) {
                    redButton_Indietro.setEnabled(true);
                }
                if (panels.get(currentIndex).getUsedPoint() != 10) {
                    redButton_Avanti.setEnabled(false);
                    redButton_FinishButton.setEnabled(false);
                }

            }
        });

        this.redButton_Indietro.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                currentIndex--;
                System.out.println("INDEX = " + currentIndex);
                if (currentIndex == -1) {
                    LoginTestManager.getInstance().backHome();
                    return;
                }
                jScrollPane1.setViewportView(panels.get(currentIndex));
//                if(currentIndex == 0){
//                    redButton_Indietro.setEnabled(false);
//                }
                if (currentIndex < panels.size() - 1) {
                    redButton_Avanti.setEnabled(true);
                }

            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new JScrollPane();
        jPanel2 = new JPanel();
        redButton_Indietro = new RedButton();
        redButton_Avanti = new RedButton();
        redButton_FinishButton = new RedButton();

        setBackground(new Color(255, 255, 255));

        jScrollPane1.setBorder(null);

        jPanel2.setBackground(new Color(255, 255, 255));

        redButton_Indietro.setText("Indietro");

        redButton_Avanti.setText("redButton2");

        redButton_FinishButton.setText("redButton1");
        redButton_FinishButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                redButton_FinishButtonActionPerformed(evt);
            }
        });

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(redButton_Indietro, GroupLayout.PREFERRED_SIZE, 126, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                .addComponent(redButton_FinishButton, GroupLayout.PREFERRED_SIZE, 134, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addComponent(redButton_Avanti, GroupLayout.PREFERRED_SIZE, 124, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(redButton_FinishButton, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(redButton_Avanti, GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                    .addComponent(redButton_Indietro, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void redButton_FinishButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_redButton_FinishButtonActionPerformed
//        try {
//            MQTTClient.getInstance().publish(MQTTClient.subscriptionTopic, LoginTestManager.getInstance().getAccount().toString());
//            JOptionPane.showMessageDialog(this, "Grazie di aver completato il questionario!\nI tuoi dati sono stati correttamente inoltrati.", "Questionario Completato", JOptionPane.INFORMATION_MESSAGE);
        LoginTestManager.getInstance().backHome();
        LoginTestManager.getInstance().cleanup();

        if (ConfigurationManager.getInstance().isAlternanza()) {
            List<Interval> freeIntervals = new ArrayList();
            LoginTestManager.getInstance().getAccount().setIntervals(freeIntervals);
            Gson gson = new Gson();
            String message = gson.toJson(LoginTestManager.getInstance().getAccount(), Account.class);
            System.out.println("MESSAGE ACCOUNT: " + message);
            try {
                MQTTClient.getInstance().publish(MQTTClient.subscriptionTopic, message);
            } catch (MqttException ex) {
                Logger.getLogger(FreeTimeFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
//            JOptionPane.showMessageDialog(null, "I tuoi dati sono stati inviati correttamente!", "Questionario completato!", JOptionPane.INFORMATION_MESSAGE);
        } else {
            FreeTimeFrame free = new FreeTimeFrame();
            free.setLocationRelativeTo(null);
            free.setVisible(true);
        }
//        } catch (MqttException ex) {
//            Logger.getLogger(PropensioneIndividualePanel.class.getName()).log(Level.SEVERE, null, ex);
//        }

    }//GEN-LAST:event_redButton_FinishButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel jPanel2;
    private JScrollPane jScrollPane1;
    private RedButton redButton_Avanti;
    private RedButton redButton_FinishButton;
    private RedButton redButton_Indietro;
    // End of variables declaration//GEN-END:variables

    @Override
    public void pointChanged() {
        System.out.println("POINT CHANGED: " + panels.get(currentIndex).getUsedPoint());
        if (currentIndex == panels.size() - 1) {
            if (panels.get(currentIndex).getUsedPoint() == 10) {
                this.redButton_FinishButton.setEnabled(true);
            } else {
                this.redButton_FinishButton.setEnabled(false);
            }
        } else if (panels.get(currentIndex).getUsedPoint() == 10) {
            this.redButton_Avanti.setEnabled(true);
        } else {
            this.redButton_Avanti.setEnabled(false);
        }

    }
}
