/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.cnr.istc.sponsor.tt.gui.activities;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.util.Date;
import javax.swing.GroupLayout;
import javax.swing.Icon;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.TransferHandler;

/**
 *
 * @author Luca Coraci <luca.coraci@istc.cnr.it> ISTC-CNR
 */
public class ActivityTurnOverlapPanel extends javax.swing.JPanel {

    private boolean resizeActive = false;
    private boolean turn = false;

    /**
     * Creates new form ActivityTurnOverlapPanel
     */
    public ActivityTurnOverlapPanel() {
        initComponents();
        this.setMaximumSize(new Dimension(32, 20000));
    }
    
    public ActivityTurnOverlapPanel(Icon icon) {
        initComponents();
        this.setMaximumSize(new Dimension(32, 20000));
        this.setBackground(null);
        this.jLabel1.setText("");
        this.jLabel1.setIcon(icon);
    }

    public ActivityTurnOverlapPanel(Date when, Icon icon, String activityName, int time) {
        initComponents();
        this.setMaximumSize(new Dimension(32, 20000));
        this.setBackground(null);
        this.jLabel1.setText("");
        this.jLabel1.setIcon(icon);
        this.setTransferHandler(new ExportAcivityExtentionDND(activityName, time));
        this.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            @Override
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                if (evt.isShiftDown()) {
                    System.out.println("SHIFT IS DOWN");
                }
                if (resizeActive) {
                    TransferHandler handle = getTransferHandler();
                    handle.exportAsDrag(ActivityTurnOverlapPanel.this, evt, TransferHandler.COPY);
                    ActivityCalendarManager.getInstance().setCurrentActivityDrag(new CurrentActivityDrag(time, activityName, when));
                }
            }
        });
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Dimension arcs = new Dimension(10, 10); //Border corners arcs {width,height}, change this to whatever you want
        int width = getWidth();
        int height = getHeight();
        Graphics2D graphics = (Graphics2D) g;
        graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

//        graphics.setComposite(AlphaComposite.getInstance(
//                AlphaComposite.SRC_OVER, 0.3f));
        //Draws the rounded panel with borders.
//        graphics.setColor(new Color(
//                getBackground().getRed(),
//                getBackground().getGreen(),
//                getBackground().getBlue(),
//                 100));
//        graphics.setColor(new Color(255, 0, 0, 100));
        graphics.setColor(turn ? Color.MAGENTA : Color.DARK_GRAY);
        graphics.fillRoundRect(0, 0, width - 1, height - 1, arcs.width, arcs.height);//paint background
        graphics.setColor(getForeground());
        this.jLabel1.repaint();
        //graphics.drawRoundRect(0, 0, width-1, height-1, arcs.width, arcs.height);//paint border
    }

    public void changeTurn(){
        turn = !turn;
        System.out.println("CHANGED -> "+turn);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new JLabel();

        setPreferredSize(new Dimension(16, 16));
        addMouseMotionListener(new MouseMotionAdapter() {
            public void mouseMoved(MouseEvent evt) {
                formMouseMoved(evt);
            }
        });

        jLabel1.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel1.setText(".");

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseMoved(MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        if (evt.getY() > this.getHeight() - 5 || evt.getY() < 5) {
            this.setCursor(new Cursor((Cursor.N_RESIZE_CURSOR)));
            resizeActive = true;
        } else {
            this.setCursor(java.awt.Cursor.getDefaultCursor());
            resizeActive = false;
        }
    }//GEN-LAST:event_formMouseMoved


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    public static class ExportAcivityExtentionDND extends TransferHandler {

        public static final DataFlavor SUPPORTED_DATE_FLAVOR = DataFlavor.stringFlavor;
        private String value;
        private int startTime;

        public ExportAcivityExtentionDND(String value, int startTime) {
            this.value = value;
            this.startTime = startTime;
        }

        public String getValue() {
            return value;
        }

        public int getStartTime() {
            return startTime;
        }

        @Override
        public int getSourceActions(JComponent c) {
            return DnDConstants.ACTION_COPY_OR_MOVE;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            Transferable t = new StringSelection(getValue());
//            System.out.println("create exportable?");
            return t;
        }

        @Override
        protected void exportDone(JComponent source, Transferable data, int action) {
            super.exportDone(source, data, action);
//            System.out.println("export done?");
            // Decide what to do after the drop has been accepted
        }
    }
}
