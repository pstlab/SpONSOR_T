/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.cnr.istc.sponsor.tt.gui.activities;

import it.cnr.istc.sponsor.tt.gui.activities.glass.ActivityTurnsLayer;
import it.cnr.istc.sponsor.tt.gui.engine.GuiEventManager;
import java.awt.GridLayout;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLayer;
import javax.swing.JPanel;
import javax.swing.TransferHandler;
import javax.swing.plaf.LayerUI;

/**
 *
 * @author Luca Coraci <luca.coraci@istc.cnr.it>
 */
public class ActivityCalendarPlacerPanel extends javax.swing.JPanel {

    /**
     * Creates new form ActivityCalendarPlacerPanel
     */
    public ActivityCalendarPlacerPanel() {
        initComponents();
        Set<String> activityKeys = GuiEventManager.getInstance().getActivityKeys();
//        this.jScrollPane1.setTransferHandler(new ValueMainImportTransferHandler());

        for (String key : activityKeys) {
            JButton button = new JButton();
            button.setTransferHandler(new ValueExportTransferHandler(key));

            button.setIcon(GuiEventManager.getInstance().getActivityIcon(key));
            button.setText(key);
            button.setFocusable(false);
            button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            button.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
                public void mouseDragged(java.awt.event.MouseEvent evt) {
                    if (evt.isShiftDown()) {
                        System.out.println("SHIFT IS DOWN");
                    }
                    
                    ActivityCalendarManager.getInstance().setCurrentActivityDrag(null);
                    TransferHandler handle = button.getTransferHandler();
                    handle.exportAsDrag(button, evt, TransferHandler.COPY);

                }
            });
            jToolBar_activityButtons.add(button);
        }

//          JPanel containerP = new JPanel();
//        containerP.setLayout(new GridLayout(0, 1));
//        containerP.setOpaque(false);
//
//        MyJLayer<JComponent> jlayer = new MyJLayer<JComponent>(housePlanPanel1, layerUI2);
//        containerP.add(jlayer);
//
//        clockLayer = new ClockLayer();
//        JPanel containerP2 = new JPanel();
//        containerP2.setLayout(new GridLayout(0, 1));
//        containerP2.add(containerP);
//        MyJLayer trup2 = new MyJLayer<JComponent>(containerP, clockLayer);
//        containerP2.add(trup2);
//
//        this.jScrollPane2.getViewport().setOpaque(false);
//        ActivityTurnGlassPane glassPane = new ActivityTurnGlassPane();
//        
//        JPanel containerP = new JPanel();
//        containerP.setLayout(new GridLayout(0, 1));
//        containerP.setOpaque(false);
//
//        MyJLayer<JComponent> jlayer = new MyJLayer<JComponent>(activityCaldendarContainer1, glassPane);
//        containerP.add(jlayer);
//        this.jScrollPane1.getViewport().setOpaque(false);
//        this.jScrollPane1.setViewportView(containerP);
        JPanel wrapper = new JPanel();
        wrapper.setLayout(new GridLayout(0, 1));
//        TimeIntervalContainer panel = new TimeIntervalContainer();
        LayerUI<JPanel> glassPane = new ActivityTurnsLayer();
        ActivityCaldendarContainer acc = new ActivityCaldendarContainer((ActivityTurnsLayer)glassPane);
        JLayer<JPanel> jlayer = new JLayer<JPanel>(acc, glassPane);
        wrapper.add(jlayer);
        this.jScrollPane1.setViewportView(wrapper);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jToolBar_activityButtons = new javax.swing.JToolBar();
        jToolBar2 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();

        jPanel1.setBackground(new java.awt.Color(204, 204, 0));

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/cnr/istc/sponsor/tt/gui/icons/arrow_sx.png"))); // NOI18N
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton2);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("dal 1 ottobre all' 8 ottobre 2016");
        jToolBar1.add(jLabel1);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/cnr/istc/sponsor/tt/gui/icons/arrow_dx.png"))); // NOI18N
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jToolBar_activityButtons.setFloatable(false);
        jToolBar_activityButtons.setRollover(true);

        jToolBar2.setFloatable(false);
        jToolBar2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar2.setRollover(true);

        jButton1.setText("NEW");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(jButton1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar_activityButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 597, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToolBar_activityButtons, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    public static class ValueExportTransferHandler extends TransferHandler {

        public static final DataFlavor SUPPORTED_DATE_FLAVOR = DataFlavor.stringFlavor;
        private String value;

        public ValueExportTransferHandler(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

//        public Color getBackgroundColor() {
//            return backgroundColor;
//        }
        
        

        @Override
        public int getSourceActions(JComponent c) {
            return DnDConstants.ACTION_COPY_OR_MOVE;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            Transferable t = new StringSelection(getValue());
//            System.out.println("create exportable?");
            return t;
        }

        @Override
        protected void exportDone(JComponent source, Transferable data, int action) {
            super.exportDone(source, data, action);
//            System.out.println("export done?");
            // Decide what to do after the drop has been accepted
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar_activityButtons;
    // End of variables declaration//GEN-END:variables

//    public static class ValueMainImportTransferHandler extends TransferHandler {
//
//        public static final DataFlavor SUPPORTED_DATE_FLAVOR = DataFlavor.stringFlavor;
//
//        public ValueMainImportTransferHandler() {
//        }
//
//        @Override
//        public boolean canImport(TransferHandler.TransferSupport support) {
//            return support.isDataFlavorSupported(SUPPORTED_DATE_FLAVOR);
//        }
//
//        @Override
//        public boolean importData(TransferHandler.TransferSupport support) {
//            boolean accept = false;
//            System.out.println("IMPORT");
//            if (canImport(support)) {
//                try {
//                    Transferable t = support.getTransferable();
//                    Object value = t.getTransferData(SUPPORTED_DATE_FLAVOR);
//                    if (value instanceof String) {
//                        Component component = support.getComponent();
//                        if (component instanceof JPanel) {
//                            Icon activityIcon = GuiEventManager.getInstance().getActivityIcon((String) value);
//                            if (activityIcon != null) {
//                                //((JPanel) component).add(new JLabel(activityIcon));
//                                ((JPanel) component).add(new ActivityTurnOverlapPanel(activityIcon));
//                            }
//                            ((JPanel) component).invalidate();
//                            ((JPanel) component).revalidate();
//                            accept = true;
//                        }
//                    }
//
//                } catch (Exception exp) {
//                    exp.printStackTrace();
//                }
//            }
//            return accept;
//        }
//    }
}
