/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.cnr.istc.sponsor.tt.gui.profiles;

import it.cnr.istc.sponsor.tt.logic.TrainerManager;
import it.cnr.istc.sponsor.tt.logic.model.ActivityTurn;
import it.cnr.istc.sponsor.tt.logic.model.Job;
import it.cnr.istc.sponsor.tt.logic.model.JobTurn;
import it.cnr.istc.sponsor.tt.logic.model.Keyword;
import it.cnr.istc.sponsor.tt.logic.model.Person;
import java.awt.Color;
import java.awt.Dialog;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;

/**
 *
 * @author Luca Coraci <luca.coraci@istc.cnr.it> ISTC-CNR
 */
public class SingleKeywordPanel extends javax.swing.JPanel {

//    private Keyword keyword = null;
    private Job job = null;
    private JobsSelectorPanel daddy = null;
    private Map<String, MiniSingleKeyPanel> panelMap = new HashMap<>();
    private List<Keyword> keywords = new ArrayList<>();
    private JobTurn jobTurn = null;
    private ActivityTurn turn;

    /**
     * Creates new form SingleKeywordPanel
     */
    public SingleKeywordPanel() {
        initComponents();
    }

    public SingleKeywordPanel(ActivityTurn turn, Job job, JobsSelectorPanel daddy) {
        initComponents();
        this.job = job;
        this.jLabel1.setText(" " + job.getName());
        this.daddy = daddy;
        this.jobTurn = new JobTurn();
        this.jobTurn.setJob(job);
        this.turn = turn;
    }
    
    public void setText(String text){
        this.jLabel1.setText(text);
        if(text.isEmpty()){
            this.jLabel1.setVisible(false);
            this.jButton_person.setVisible(false);
        }
        
    }

    public void setDaddy(JobsSelectorPanel daddy) {
        this.daddy = daddy;
    }

    public List<Keyword> getKeywords() {
        return keywords;
    }
    
    public List<MiniSingleKeyPanel> getMiniSingleKeyPanels(){
        return this.panelMap.values().stream().collect(Collectors.toList());
    }
    

    public void addKeywords(List<Keyword> keys, boolean avoid) {
        for (Keyword key : keys) {
            if (!keywords.contains(key)) {
                MiniSingleKeyPanel miniSingleKeyPanel = new MiniSingleKeyPanel(avoid, key);
                miniSingleKeyPanel.setParent(this);
                this.jPanel_container.add(miniSingleKeyPanel);
                this.panelMap.put(key.getKeyword(), miniSingleKeyPanel);
            }
        }
    }

//    public Job getJob() {
//        return job;
//    }

    public JobTurn getJobTurn() {
        return jobTurn;
    }
    
    

//    public void setJob(Job job) {
//        this.job = job;
//        this.jLabel1.setText(" " + job.getName());
//    }

    public void refresh() {
        this.jPanel_container.invalidate();
        this.jPanel_container.revalidate();
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new JLabel();
        jPanel_container = new JPanel();
        jToolBar1 = new JToolBar();
        jButton_person = new JButton();
        jButton1 = new JButton();
        jButton2 = new JButton();

        setBackground(new Color(255, 255, 255));
        setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));

        jLabel1.setFont(new Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("jLabel1");

        jPanel_container.setBackground(new Color(255, 255, 255));
        jPanel_container.setLayout(new GridLayout(1, 8));

        jToolBar1.setBackground(new Color(255, 255, 255));
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setBorderPainted(false);

        jButton_person.setIcon(new ImageIcon(getClass().getResource("/it/cnr/istc/sponsor/tt/gui/icons/user16.png"))); // NOI18N
        jButton_person.setFocusable(false);
        jButton_person.setHorizontalTextPosition(SwingConstants.CENTER);
        jButton_person.setOpaque(false);
        jButton_person.setVerticalTextPosition(SwingConstants.BOTTOM);
        jButton_person.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton_personActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton_person);

        jButton1.setIcon(new ImageIcon(getClass().getResource("/it/cnr/istc/sponsor/tt/gui/icons/add16.png"))); // NOI18N
        jButton1.setOpaque(false);
        jButton1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton2.setIcon(new ImageIcon(getClass().getResource("/it/cnr/istc/sponsor/tt/gui/icons/avoid16.png"))); // NOI18N
        jButton2.setOpaque(false);
        jButton2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 104, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_container, GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_container, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
            .addComponent(jToolBar1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//        KeywordChooserFrame frame = new KeywordChooserFrame();
//        frame.setLocationRelativeTo(this);
//        frame.setParentPanel(this);
//        frame.setAvoid(false);
//        frame.setVisible(true);

        this.daddy.setSelectedKeyPanel(this);
        this.daddy.setMainKayEnabled(true, false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
//        KeywordChooserFrame frame = new KeywordChooserFrame();
//        frame.setLocationRelativeTo(this);
//        frame.setParentPanel(this);
//        frame.setAvoid(true);
//        frame.setVisible(true);
        this.daddy.setSelectedKeyPanel(this);
        this.daddy.setMainKayEnabled(true, true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton_personActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton_personActionPerformed

        DirectPersonSelectorDialog dialog = new DirectPersonSelectorDialog();
        dialog.init(turn, jobTurn);
        dialog.setLocationRelativeTo(null);
        
        dialog.setAlwaysOnTop(true);
        dialog.setVisible(true);
        
        Person selectedPerson = dialog.getSelectedPerson();
        if(selectedPerson != null){
            this.jButton1.setEnabled(false);
            this.jButton2.setEnabled(false);
            this.turn.addWantedPerson(selectedPerson);
            this.jobTurn.setWantedPerson(selectedPerson);
            this.jLabel1.setText(selectedPerson.toString());
        }
    }//GEN-LAST:event_jButton_personActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton jButton1;
    private JButton jButton2;
    private JButton jButton_person;
    private JLabel jLabel1;
    private JPanel jPanel_container;
    private JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    void removeKeyword(String keyword) {
        if (this.panelMap.containsKey(keyword)) {
            this.jPanel_container.remove(this.panelMap.get(keyword));
            refresh();

        }
    }

}
