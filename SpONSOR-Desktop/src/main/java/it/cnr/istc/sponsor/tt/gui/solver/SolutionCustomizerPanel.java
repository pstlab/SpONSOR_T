/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.cnr.istc.sponsor.tt.gui.solver;

import it.cnr.istc.sponsor.solver.sponsorsolver.SolverType;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;

/**
 *
 * @author Luca Coraci <luca.coraci@istc.cnr.it> ISTC-CNR
 */
public class SolutionCustomizerPanel extends javax.swing.JPanel implements SolverListener {

    boolean manualStop = false;
    private JFrame parent = null;
    private String log = "<html><body bgcolor=black>";

    /**
     * Creates new form SolutionCustomizerPanel
     */
    public SolutionCustomizerPanel() {
        initComponents();
        this.jComboBox1.setSelectedIndex(0);
//        SolverManager.getInstance().addSolverListener(this);
//        SolverManager2.getInstance().addSolverListener(this);
        SolverManager4.getInstance().addSolverListener(this);
        jLabel_status.setText("<html><font color=blu>In attesa");
        this.jEditorPane1.setContentType("text/html");
        this.jTextArea1.setText(log);
    }

    public void setParent(JFrame parent) {
        this.parent = parent;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new JLabel();
        jComboBox1 = new JComboBox<>();
        jLabel_status = new JLabel();
        jScrollPane2 = new JScrollPane();
        jTextArea2 = new JTextArea();
        jScrollPane1 = new JScrollPane();
        jTextArea1 = new JTextArea();
        jLabel2 = new JLabel();
        jButton_stop = new JButton();
        jButton_Start = new JButton();
        jButton_Mostra = new JButton();
        jScrollPane3 = new JScrollPane();
        jEditorPane1 = new JEditorPane();
        jLabel3 = new JLabel();
        jComboBox2 = new JComboBox<>();

        jLabel1.setText("Solver:");

        jComboBox1.setModel(new DefaultComboBoxModel<>(new String[] { "Z3", "Choco", "Choco3" }));
        jComboBox1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel_status.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        jLabel_status.setText("jLabel3");
        jLabel_status.setVerticalAlignment(SwingConstants.TOP);
        jLabel_status.setVerticalTextPosition(SwingConstants.TOP);

        jTextArea2.setBackground(new Color(0, 0, 0));
        jTextArea2.setColumns(20);
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new Color(0, 0, 0));
        jTextArea1.setColumns(20);
        jTextArea1.setForeground(new Color(255, 255, 0));
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel2.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(SwingConstants.RIGHT);
        jLabel2.setText("Log:");

        jButton_stop.setIcon(new ImageIcon(getClass().getResource("/it/cnr/istc/sponsor/tt/gui/icons/player_stop32.png"))); // NOI18N
        jButton_stop.setText("stop");
        jButton_stop.setEnabled(false);
        jButton_stop.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton_stopActionPerformed(evt);
            }
        });

        jButton_Start.setIcon(new ImageIcon(getClass().getResource("/it/cnr/istc/sponsor/tt/gui/icons/play32.png"))); // NOI18N
        jButton_Start.setText("start");
        jButton_Start.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton_StartActionPerformed(evt);
            }
        });

        jButton_Mostra.setIcon(new ImageIcon(getClass().getResource("/it/cnr/istc/sponsor/tt/gui/icons/Blueprint32.png"))); // NOI18N
        jButton_Mostra.setText("Mostra");
        jButton_Mostra.setEnabled(false);
        jButton_Mostra.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton_MostraActionPerformed(evt);
            }
        });

        jScrollPane3.setBackground(new Color(0, 0, 0));

        jEditorPane1.setBackground(new Color(0, 0, 0));
        jEditorPane1.setBorder(null);
        jScrollPane3.setViewportView(jEditorPane1);

        jLabel3.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(SwingConstants.RIGHT);
        jLabel3.setText("Solver:");

        jComboBox2.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        jComboBox2.setModel(new DefaultComboBoxModel<>(new String[] { "JaCoP Solver", "Choco Solver" }));
        jComboBox2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton_stop)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_Mostra, GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_Start))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                            .addComponent(jComboBox2, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                    .addComponent(jLabel2))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_Mostra)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton_stop)
                        .addComponent(jButton_Start)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        int selectedIndex = this.jComboBox1.getSelectedIndex();
        if (selectedIndex == 0) {
            jButton_stop.setEnabled(false);
            this.jTextArea1.setText("Z3: questo solver è molto potente, si ferma quanto ha trovato una soluzione OTTIMA. Non è possibile stopparlo per avere soluzioni parziali");
        } else {
//            jButton_stop.setEnabled(true);
            this.jTextArea1.setText("Choco: questo solver è molto lento per trovare una soluzione ottima ma può essere stoppato a mano per ottenere una soluzione parziale");
        }

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton_StartActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton_StartActionPerformed
        int selectedIndex = this.jComboBox1.getSelectedIndex();
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//        if (selectedIndex == 0) {
//            SolverManager.getInstance().solve();
//        } else if (selectedIndex == 1) {
//            SolverManager2.getInstance().solve();
//        } else {
        SolverManager4.getInstance().solve();
//        }
        jLabel_status.setText("<html><font color=red>Avvio Solver");
        this.jButton_Start.setEnabled(false);
        jButton_stop.setEnabled(true);

    }//GEN-LAST:event_jButton_StartActionPerformed

    private void jButton_stopActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton_stopActionPerformed
        manualStop = true;
//        int selectedIndex = this.jComboBox1.getSelectedIndex();
//        if (selectedIndex == 1) {
//            SolverManager2.getInstance().stop();
//            this.setCursor(Cursor.getDefaultCursor());
//            SolverManager2.getInstance().showSolution();
//        } else if(selectedIndex==3){
//            SolverManager4.getInstance().stop();
        this.setCursor(Cursor.getDefaultCursor());
        SolverManager4.getInstance().showSolution();
//        }

        if (parent != null) {
            this.parent.setVisible(false);
            JOptionPane.showMessageDialog(null, "Solver arrestato.");
            this.parent.dispose();
        }

    }//GEN-LAST:event_jButton_stopActionPerformed

    private void jButton_MostraActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton_MostraActionPerformed

//        int selectedIndex = this.jComboBox1.getSelectedIndex();
//        if (selectedIndex == 1) {
//             SolverManager2.getInstance().showSolution();
//        } else if(selectedIndex == 2) {
        SolverManager4.getInstance().showSolution();
//        }


    }//GEN-LAST:event_jButton_MostraActionPerformed

    private void jComboBox2ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        int selectedIndex = jComboBox2.getSelectedIndex();
        if(selectedIndex != -1){
            if(selectedIndex == 0){
                SolverManager4.getInstance().setSolverType(SolverType.HeuristicJaCoP);
            }else if(selectedIndex == 1){
                SolverManager4.getInstance().setSolverType(SolverType.HeuristicChoco);
            }
        }
        
    }//GEN-LAST:event_jComboBox2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton jButton_Mostra;
    private JButton jButton_Start;
    private JButton jButton_stop;
    private JComboBox<String> jComboBox1;
    private JComboBox<String> jComboBox2;
    private JEditorPane jEditorPane1;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel_status;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    private JTextArea jTextArea1;
    private JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void solutionFound() {
        if (manualStop) {
            jLabel_status.setText("<html><div><font color=green>Solver arrestato, soluzione parziale trovata.");
            log += "<br>" + "<font color=green>Solver arrestato, soluzione parziale trovata.";
            jEditorPane1.setText(log);
        } else {
            jLabel_status.setText("<html><div><font color=green>La soluzione Ottima è stata trovata!");
            log += "<br>" + "<font color=green>La soluzione Ottima è stata trovata!";
            jEditorPane1.setText(log);
        }
        jEditorPane1.setCaretPosition(this.jEditorPane1.getDocument().getLength());
        this.jEditorPane1.repaint();
        jButton_Mostra.setEnabled(true);
        this.parent.setVisible(false);
        this.parent.dispose();
    }

    @Override
    public void temporarySolutionFound(int value) {
        jLabel_status.setText("<html><div><font color=orange>Una soluzione temporanea è stata trovata (" + value + ")");
        log += "<br>" + "<font color=yellow>Una soluzione temporanea è stata trovata (" + value + ")";
        jEditorPane1.setText(log);
//        this.jEditorPane1.append("<div><font color=orange>Una soluzione temporanea è stata trovata (" + value + ")");
        this.jTextArea1.setCaretPosition(this.jTextArea1.getDocument().getLength());
        this.jTextArea1.update(this.jTextArea1.getGraphics());
        jButton_Mostra.setEnabled(true);
        
        jEditorPane1.setCaretPosition(this.jEditorPane1.getDocument().getLength());
        this.jEditorPane1.repaint();
    }

    @Override
    public void messageFromSolver(String message) {
        jLabel_status.setText("<html><div><font color=orange>" + message);
        log += "<br>" + "<font color=orange>" + message;
        jEditorPane1.setText(log);
        jEditorPane1.setCaretPosition(this.jEditorPane1.getDocument().getLength());
        this.jEditorPane1.repaint();
        this.jTextArea1.append("<font color=orange>" + message);
        this.jTextArea1.setCaretPosition(this.jTextArea1.getDocument().getLength());
        this.jTextArea1.update(this.jTextArea1.getGraphics());
    }

    @Override
    public void error(String message) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                System.out.println("ERROR");
                System.out.println("Message -> " + message);
                jLabel_status.setText("<html><div><font color=red>" + message);

                jTextArea1.append("<font color=red>" + message);
                jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
                jTextArea1.update(jTextArea1.getGraphics());

                log += "<br>" + "<font color=red>" + message +"</font>";
                jEditorPane1.setText(log);

                jButton_stop.setEnabled(false);
                jButton_Start.setEnabled(true);
                setCursor(Cursor.getDefaultCursor());
                jLabel_status.invalidate();
                jLabel_status.revalidate();
                repaint();
                SolverManager4.getInstance().silentStop();
                manualStop = true;
            }
        });

    }

}
