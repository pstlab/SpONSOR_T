/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.cnr.istc.sponsor.tt.gui.profiles;

import it.cnr.istc.sponsor.tt.gui.profiles.mr.KeywordListModel;
import it.cnr.istc.sponsor.tt.logic.MQTTClient;
import it.cnr.istc.sponsor.tt.logic.MQTTListener;
import it.cnr.istc.sponsor.tt.logic.TrainerManager;
import it.cnr.istc.sponsor.tt.logic.model.ActivityName;
import it.cnr.istc.sponsor.tt.logic.model.ActivityTurn;
import it.cnr.istc.sponsor.tt.logic.model.Job;
import it.cnr.istc.sponsor.tt.logic.model.Keyword;
import it.cnr.istc.sponsor.tt.logic.model.Person;
import it.cnr.istc.sponsor.tt.logic.model.Project;
import it.cnr.istc.sponsor.tt.logic.model.Skill;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.Beans;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToolBar;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;

/**
 *
 * @author Luca Coraci <luca.coraci@istc.cnr.it> ISTC-CNR
 */
public class JobsSelectorPanel extends javax.swing.JPanel implements JobEditingListener, MQTTListener {

    private List<SingleJobPanel> panels = new ArrayList<>();
    private List<SingleKeywordPanel> keyPanels = new ArrayList<>();

    private List<SingleKeywordPanel> generalKeypanels = new ArrayList<>();

    private SingleKeywordPanel selectedKeyPanel = null;
    private boolean avoid = false;
    private Keyword creatingKey = null;
    private boolean general = false;
    private ActivityTurn turn;

    /**
     * Creates new form JobsSelectorPanel
     */
    public JobsSelectorPanel() {
        initComponents();

        if (!Beans.isDesignTime()) {
            MQTTClient.getInstance().addMQTTListener(this);
            MQTTClient.getInstance().sendQueryToGetKeywords();
        }
        this.turn = turn;
        this.setMainKayEnabled(false, false);
        JobEditingManager.getInstance().addJobEditingListener(this);
        List<Job> jobs = TrainerManager.getInstance().getJobs();
        System.out.println(" TYHASUIHDIAHS - > " + jobs.size());
        for (Job job : jobs) {
            SingleJobPanel panel = new SingleJobPanel(job);
            jPanel_container.add(panel);
            panels.add(panel);
        }
        this.generalKeyContainer.setText("");
        this.generalKeyContainer.setDaddy(this);
    }

    public void setTurn(ActivityTurn turn) {
        this.turn = turn;
    }

    public List<SingleJobPanel> getPanels() {
        return panels;
    }

    public List<SingleKeywordPanel> getKeyPanels() {
        return keyPanels;
    }

    public void setSelectedKeyPanel(SingleKeywordPanel selectedKeyPanel) {
        this.selectedKeyPanel = selectedKeyPanel;
    }

    public SingleKeywordPanel getGeneralKeyContainer() {
        return generalKeyContainer;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new JButton();
        keywordListModel1 = new KeywordListModel();
        jPanel_GroupKeys = new JPanel();
        jToolBar1 = new JToolBar();
        jButton2 = new JButton();
        jButton3 = new JButton();
        jSplitPane1 = new JSplitPane();
        jPanel1 = new JPanel();
        jScrollPane1 = new JScrollPane();
        jPanel_jobContainer = new JPanel();
        jPanel_container = new JPanel();
        jPanel4 = new JPanel();
        generalKeyContainer = new SingleKeywordPanel();
        jPanel2 = new JPanel();
        jPanel3 = new JPanel();
        jPanel_mainKey = new JPanel();
        jScrollPane2 = new JScrollPane();
        jList1 = new JList<>();
        jLabel1 = new JLabel();
        jTextField_key = new JTextField();
        jButton_Inserisci = new JButton();
        jButton_Deve = new JButton();
        jButton_NonDeve = new JButton();
        jLabel_K = new JLabel();

        jButton1.setText("jButton1");
        jButton1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel_GroupKeys.setBackground(new Color(255, 255, 0));
        jPanel_GroupKeys.setLayout(new GridLayout(6, 0));

        jToolBar1.setBackground(new Color(255, 255, 255));
        jToolBar1.setFloatable(false);
        jToolBar1.setOrientation(SwingConstants.VERTICAL);
        jToolBar1.setRollover(true);

        jButton2.setIcon(new ImageIcon(getClass().getResource("/it/cnr/istc/sponsor/tt/gui/icons/add16.png"))); // NOI18N
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(SwingConstants.CENTER);
        jButton2.setOpaque(false);
        jButton2.setVerticalTextPosition(SwingConstants.BOTTOM);
        jButton2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton3.setIcon(new ImageIcon(getClass().getResource("/it/cnr/istc/sponsor/tt/gui/icons/avoid16.png"))); // NOI18N
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(SwingConstants.CENTER);
        jButton3.setOpaque(false);
        jButton3.setVerticalTextPosition(SwingConstants.BOTTOM);
        jButton3.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jSplitPane1.setDividerLocation(400);

        jPanel1.setBackground(new Color(255, 255, 255));

        jScrollPane1.setEnabled(false);

        jPanel_jobContainer.setBackground(new Color(255, 255, 255));
        jPanel_jobContainer.setLayout(new GridLayout(10, 1));
        jScrollPane1.setViewportView(jPanel_jobContainer);

        jPanel_container.setBackground(new Color(255, 255, 255));
        jPanel_container.setLayout(new GridLayout(7, 2));

        jPanel4.setBackground(new Color(255, 255, 255));
        jPanel4.setBorder(BorderFactory.createTitledBorder("Chiavi essenziali al gruppo"));

        generalKeyContainer.setBorder(null);

        GroupLayout jPanel4Layout = new GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(generalKeyContainer, GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(generalKeyContainer, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel_container, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel4, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel_container, GroupLayout.PREFERRED_SIZE, 245, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(jPanel1);

        jPanel3.setBackground(new Color(255, 255, 255));

        jPanel_mainKey.setBackground(new Color(255, 255, 255));

        jScrollPane2.setBorder(null);

        jList1.setBorder(BorderFactory.createTitledBorder("Lista Keyword"));
        jList1.setModel(keywordListModel1);
        jScrollPane2.setViewportView(jList1);

        jLabel1.setText("Nuova Keyword:");

        jTextField_key.setFont(new Font("Tahoma", 1, 11)); // NOI18N
        jTextField_key.setForeground(new Color(51, 51, 255));

        jButton_Inserisci.setBackground(new Color(255, 51, 51));
        jButton_Inserisci.setFont(new Font("Gill Sans MT Condensed", 0, 16)); // NOI18N
        jButton_Inserisci.setForeground(new Color(255, 255, 255));
        jButton_Inserisci.setText("<html><span style='font-size: 18px;'>I</span>NSERISCI");
        jButton_Inserisci.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton_InserisciActionPerformed(evt);
            }
        });

        jButton_Deve.setBackground(new Color(255, 51, 51));
        jButton_Deve.setFont(new Font("Gill Sans MT Condensed", 0, 16)); // NOI18N
        jButton_Deve.setForeground(new Color(255, 255, 255));
        jButton_Deve.setText("<html><span style='font-size: 18px;'>D</span>EVE AVERE");
        jButton_Deve.setEnabled(false);
        jButton_Deve.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton_DeveActionPerformed(evt);
            }
        });

        jButton_NonDeve.setBackground(new Color(255, 51, 51));
        jButton_NonDeve.setFont(new Font("Gill Sans MT Condensed", 0, 16)); // NOI18N
        jButton_NonDeve.setForeground(new Color(255, 255, 255));
        jButton_NonDeve.setText("<html><span style='font-size: 18px;'>N</span>ON DEVE AVERE");
        jButton_NonDeve.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton_NonDeveActionPerformed(evt);
            }
        });

        jLabel_K.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        jLabel_K.setText("Selezione Keyword");

        GroupLayout jPanel_mainKeyLayout = new GroupLayout(jPanel_mainKey);
        jPanel_mainKey.setLayout(jPanel_mainKeyLayout);
        jPanel_mainKeyLayout.setHorizontalGroup(jPanel_mainKeyLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_mainKeyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_mainKeyLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_K, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel_mainKeyLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 167, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel_mainKeyLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_mainKeyLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField_key))
                            .addGroup(GroupLayout.Alignment.TRAILING, jPanel_mainKeyLayout.createSequentialGroup()
                                .addGap(0, 44, Short.MAX_VALUE)
                                .addGroup(jPanel_mainKeyLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton_NonDeve, GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton_Deve)
                                    .addComponent(jButton_Inserisci, GroupLayout.Alignment.TRAILING))))))
                .addContainerGap())
        );
        jPanel_mainKeyLayout.setVerticalGroup(jPanel_mainKeyLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel_mainKeyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_K)
                .addGroup(jPanel_mainKeyLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(GroupLayout.Alignment.TRAILING, jPanel_mainKeyLayout.createSequentialGroup()
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(jPanel_mainKeyLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanel_mainKeyLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextField_key, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_Inserisci, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_NonDeve, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_Deve, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_mainKey, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_mainKey, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(jPanel2);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, GroupLayout.Alignment.TRAILING)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//        Window parentWindow = SwingUtilities.windowForComponent(this);
        Window ancestor = (Window) this.getTopLevelAncestor();
        KeywordChooserDialog frame = new KeywordChooserDialog(ancestor);

        frame.setLocationRelativeTo(ancestor);
        frame.toFront();
        frame.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton_InserisciActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton_InserisciActionPerformed

        String text = this.jTextField_key.getText();
        if (text.isEmpty()) {
            System.err.println("ERRORE STRINGA VUOTA");
            return;
        }
        creatingKey = new Keyword();
        creatingKey.setKeyword(text);
        MQTTClient.getInstance().createKeyword(text);
        //        this.keywordListModel1.addElement(key);
    }//GEN-LAST:event_jButton_InserisciActionPerformed

    private void jButton_DeveActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton_DeveActionPerformed

        if (general) {
            List<Keyword> selectedValuesList = this.jList1.getSelectedValuesList();
            for (Keyword keyword : selectedValuesList) {
                MiniSingleKeyPanel miniSingleKeyPanel = new MiniSingleKeyPanel(avoid, keyword);
                miniSingleKeyPanel.setParent(this.jPanel_GroupKeys);
                jPanel_GroupKeys.add(miniSingleKeyPanel);
//                generalKeypanels.add(selectedKeyPanel);
            }

        } else {

            List<Keyword> selectedValuesList = this.jList1.getSelectedValuesList();
            this.selectedKeyPanel.addKeywords(selectedValuesList, avoid);
            this.selectedKeyPanel.refresh();
            this.setMainKayEnabled(false, false);
        }
        general = false;
    }//GEN-LAST:event_jButton_DeveActionPerformed

    private void jButton_NonDeveActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton_NonDeveActionPerformed
        if (general) {

        } else {
            List<Keyword> selectedValuesList = this.jList1.getSelectedValuesList();
            this.selectedKeyPanel.addKeywords(selectedValuesList, avoid);
            this.selectedKeyPanel.refresh();
            this.setMainKayEnabled(false, true);
        }
        general = false;
    }//GEN-LAST:event_jButton_NonDeveActionPerformed

    private void jButton2ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        setMainKayEnabled(true, false);
        general = true;
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        setMainKayEnabled(true, true);
        general = true;
    }//GEN-LAST:event_jButton3ActionPerformed

    public void setMainKayEnabled(boolean enabled, boolean avoid) {

        this.avoid = avoid;
        this.jLabel_K.setText(avoid ? "Seleziona keyword da evitare" : "Seleziona keyword da richiedere");
        this.jLabel_K.setForeground(avoid ? new Color(100, 0, 0) : new Color(0, 120, 0));
        this.jLabel_K.setEnabled(enabled);
        this.jList1.setEnabled(enabled);
        this.jTextField_key.setEnabled(enabled);
        if (enabled) {
            this.jButton_Deve.setEnabled(!avoid);
            this.jButton_NonDeve.setEnabled(avoid);
        } else {
            this.jButton_Deve.setEnabled(enabled);
            this.jButton_NonDeve.setEnabled(enabled);
        }
        this.jButton_Deve.setEnabled(!avoid);
        this.jButton_Inserisci.setEnabled(enabled);
        ;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private SingleKeywordPanel generalKeyContainer;
    private JButton jButton1;
    private JButton jButton2;
    private JButton jButton3;
    private JButton jButton_Deve;
    private JButton jButton_Inserisci;
    private JButton jButton_NonDeve;
    private JLabel jLabel1;
    private JLabel jLabel_K;
    private JList<Keyword> jList1;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JPanel jPanel4;
    private JPanel jPanel_GroupKeys;
    private JPanel jPanel_container;
    private JPanel jPanel_jobContainer;
    private JPanel jPanel_mainKey;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JSplitPane jSplitPane1;
    private JTextField jTextField_key;
    private JToolBar jToolBar1;
    private KeywordListModel keywordListModel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addJob(Job job) {
        SingleKeywordPanel ppp = new SingleKeywordPanel(turn, job, this);
        this.keyPanels.add(ppp);
        this.jPanel_jobContainer.add(ppp);

        this.jPanel_jobContainer.invalidate();
        this.jPanel_jobContainer.revalidate();
        this.repaint();
    }

    @Override
    public void removeJob(Job job) {
        int index = -1;
        for (int i = this.keyPanels.size() - 1; i >= 0; i--) {
            if (this.keyPanels.get(i).getJobTurn().getJob().getName().equals(job.getName())) {
                index = i;
                break;
            }
        }
        if (index == -1) {
            return;
        }
        SingleKeywordPanel removed = this.keyPanels.remove(index);
        this.jPanel_jobContainer.remove(removed);
        this.jPanel_jobContainer.invalidate();
        this.jPanel_jobContainer.revalidate();
        this.repaint();
    }

    @Override
    public void peopleDataArrived(List<Person> people) {

    }

    @Override
    public void jobsDataArrived(List<Job> jobs) {

    }

    @Override
    public void skillsDataArrived(List<Skill> skills) {

    }

    @Override
    public void userDeleted(Long id) {

    }

    @Override
    public void jobDeleted(Long id) {

    }

    @Override
    public void keywordDeleted(Long id) {

    }

    @Override
    public void keywordCreated(Long id) {
        if (creatingKey == null) {
            System.out.println("not me");
            return;
        }
        creatingKey.setId(id);
        this.keywordListModel1.addElement(creatingKey);
    }

    @Override
    public void keywordsDataArrived(List<Keyword> keys) {
        for (Keyword k : keys) {
            this.keywordListModel1.addElement(k);
        }
    }

    @Override
    public void jobCreated(String nameJob, Long id) {

    }

    @Override
    public void projectsDataArrived(List<Project> projects) {
    }

    @Override
    public void projectCreated(Project project) {
    }

    @Override
    public void projectDeleted(long id) {
    }

    @Override
    public void projectLoaded(Project project) {
    }

    @Override
    public void activityNamesDataArrived(List<ActivityName> activities) {
    }

    @Override
    public void activityNameCreated(ActivityName activity) {
    }

    @Override
    public void activityNameDeleted(long id) {
    }

    @Override
    public void userCreated(Person person) {
    }

}
